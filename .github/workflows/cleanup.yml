
name: Delete Branches and clean up Mobb project folder

on:
  workflow_dispatch:

jobs:
  delete-branches:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      statuses: write
      contents: write
      actions: read
    env:
      MOBB_API_TOKEN: ${{ secrets.MOBB_API_TOKEN }}
      PROJECT_ID: "dd429b62-8998-488c-b3ed-906aa9e0db0c"  # Set your Project ID here

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all branches are fetched

      - name: List all branches
        run: |
          git branch -r

      - name: Delete branches except 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          protected_branch="main"
          branches=$(git branch -r | grep -v "$protected_branch" | grep -v "/HEAD" | sed 's/origin\///')
          
          for branch in $branches; do
            echo "Deleting branch: $branch"
            git push origin --delete "$branch"
          done

      - name: List all projects and fetch vulnerability reports
        id: list-reports
        run: |
          # Execute the query to get all projects
          LIST_PROJECT_QUERY=$(
            jq -n --arg projectId "$PROJECT_ID" --arg unfinishedMaxTimestamp "2024-01-01T00:00:00.000Z" '{
              query: "query GetProject($projectId: uuid!, $unfinishedMaxTimestamp: timestamptz!) {
                project_by_pk(id: $projectId) {
                  name
                  id
                  isDefault
                  organizationId
                  vulnerabilityReports: lastAnalysedVulReports(
                    where: {
                      _or: [
                        {fixReport: {state: {_in: [Finished, Initialized, Expired]}, repoArchiveId: {_is_null: false}}},
                        {fixReport: {state: {_in: [Created, Digested, Requested]}, createdOn: {_gte: $unfinishedMaxTimestamp}}}
                      ]
                    }
                  ) {
                    vendor
                    name
                    id
                    fixReport {
                      id
                      fixesDoneCount
                      fixesInprogressCount
                      fixesReadyCount
                      issueLanguages
                      issueTypes
                      fixesCountByEffort
                      vulnerabilitySeverities
                      fixes_aggregate {
                        aggregate {
                          count
                        }
                      }
                      repo {
                        originalUrl
                        reference
                        name
                      }
                      createdOn
                      expirationOn
                      createdByUser {
                        email
                      }
                      state
                    }
                  }
                }
              }",
              variables: {
                projectId: $projectId,
                unfinishedMaxTimestamp: $unfinishedMaxTimestamp
              },
              operationName: "GetProject"
            }'
          )
          
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "x-mobb-key: $MOBB_API_TOKEN" \
            -d "$LIST_PROJECT_QUERY" \
            https://api.mobb.ai/v1/graphql)
          
          echo "Response: $RESPONSE"

          
          # Parse the vulnerability reports from the response
          echo "Vulnerability Reports:"
          echo $RESPONSE | jq '.data.project_by_pk.vulnerabilityReports' > reports.json

          # Store the reports in the GitHub output for later steps
          echo "::set-output name=reports::$(cat reports.json)"

      - name: Delete each vulnerability report
        run: |
          # Read the reports from the previous step
          REPORTS=$(cat reports.json)
          
          # Iterate through each report
          echo $REPORTS | jq -c '.[]' | while read report; do
            VENDOR=$(echo $report | jq -r '.vendor')
            ORIGINAL_URL=$(echo $report | jq -r '.fixReport.repo.originalUrl')
            REFERENCE=$(echo $report | jq -r '.fixReport.repo.reference')

            # Define the GraphQL mutation to delete the vulnerability report
            DELETE_REPORT_MUTATION=$(jq -n --arg vendor "$VENDOR" --arg originalUrl "$ORIGINAL_URL" --arg reference "$REFERENCE" --arg projectId "$PROJECT_ID" \
            '{"query":"mutation MakeVulnerabilityReportDeleted($vendor: vulnerability_report_vendor_enum, $originalUrl: String!, $reference: String!, $projectId: uuid!) { update_vulnerability_report(where: {vendor: {_eq: $vendor}, projectId: {_eq: $projectId}, fixReport: {repo: {originalUrl: {_eq: $originalUrl}, reference: {_eq: $reference}}}}, _set: {isDeleted: true}) { affected_rows }}","variables":{"vendor":$vendor,"originalUrl":$originalUrl,"reference":$reference,"projectId":$projectId},"operationName":"MakeVulnerabilityReportDeleted"}')

            # Execute the mutation to delete the report
            RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "x-mobb-key: $MOBB_API_TOKEN" \
              -d "$DELETE_REPORT_MUTATION" \
              https://api.mobb.ai/v1/graphql)
            
            echo "Mutation response: $RESPONSE"

          done

      - name: Verify deletion by listing projects again
        run: |
          # Execute the same query to ensure there are no more reports left
          # Execute the query to get all projects
          LIST_PROJECT_QUERY=$(
            jq -n --arg projectId "$PROJECT_ID" --arg unfinishedMaxTimestamp "2024-01-01T00:00:00.000Z" '{
              query: "query GetProject($projectId: uuid!, $unfinishedMaxTimestamp: timestamptz!) {
                project_by_pk(id: $projectId) {
                  name
                  id
                  isDefault
                  organizationId
                  vulnerabilityReports: lastAnalysedVulReports(
                    where: {
                      _or: [
                        {fixReport: {state: {_in: [Finished, Initialized, Expired]}, repoArchiveId: {_is_null: false}}},
                        {fixReport: {state: {_in: [Created, Digested, Requested]}, createdOn: {_gte: $unfinishedMaxTimestamp}}}
                      ]
                    }
                  ) {
                    vendor
                    name
                    id
                    fixReport {
                      id
                      fixesDoneCount
                      fixesInprogressCount
                      fixesReadyCount
                      issueLanguages
                      issueTypes
                      fixesCountByEffort
                      vulnerabilitySeverities
                      fixes_aggregate {
                        aggregate {
                          count
                        }
                      }
                      repo {
                        originalUrl
                        reference
                        name
                      }
                      createdOn
                      expirationOn
                      createdByUser {
                        email
                      }
                      state
                    }
                  }
                }
              }",
              variables: {
                projectId: $projectId,
                unfinishedMaxTimestamp: $unfinishedMaxTimestamp
              },
              operationName: "GetProject"
            }'
          )
          
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "x-mobb-key: $MOBB_API_TOKEN" \
            -d "$LIST_PROJECT_QUERY" \
            https://api.mobb.ai/v1/graphql)
          
          echo "Response: $RESPONSE"
